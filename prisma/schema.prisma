// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id                String      @default(cuid()) @id
  slug              String      @unique
  status            PostStatus  @default(DRAFT)
  title             String
  content           String?
  image             String?
  createdAt         DateTime    @default(now()) @map(name: "created_at")
  updatedAt         DateTime    @updatedAt @map(name: "updated_at")

  authorId          String?
  author            User?       @relation(fields: [authorId], references: [id])

  comments          Comment[]
  tags              Tag[]       @relation("PostToTag")

  @@index([slug])
  @@index([authorId])
  @@map("posts")
}

model Comment {
  id                String   @id @default(cuid())
  content           String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  postId            String
  post              Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId          String
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  parentId          String?
  parent            Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies           Comment[] @relation("CommentToComment")
  
  @@index([postId])
  @@index([authorId])
  @@map("comments")
}

model Tag {
  id                String   @id @default(cuid())
  name              String   @unique
  slug              String   @unique
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  posts             Post[]   @relation("PostToTag")
  
  @@map("tags")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

model User {
  id                String    @default(cuid()) @id
  email             String    @unique
  emailVerified     Boolean?  @map(name: "email_verified")
  password          String?
  name              String?
  role              UserRole  @default(USER)
  avatar            String?
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")

  posts             Post[]
  comments          Comment[]
  accounts          Account[]
  sessions          Session[]

  @@map(name: "users")
  @@index(email)
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map(name: "user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  oauthToken        String? @map(name: "oauth_token")
  oauthTokenSecret  String? @map(name: "oauth_token_secret")
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
